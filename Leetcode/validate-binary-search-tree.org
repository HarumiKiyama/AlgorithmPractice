* Description
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees.

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true

Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
* Solution
#+begin_src python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        def helper(root):
            if root is None:
                return True, 2 ** 32, -(2 ** 32)
            left, l_min, l_max = helper(root.left)
            right, r_min, r_max = helper(root.right)
            if not left or not right:
                return False, None, None
            if l_max >= root.val or r_min <= root.val:
                return False, None, None
            if root.left is None and root.right is None:
                return True, min(root.val, l_min, r_min), max(root.val, l_max, r_max)
            if root.left is None and root.right.val >= root.val:
                return True, min(root.val, l_min, r_min), max(root.val, l_max, r_max)
            if root.right is None and root.left.val <= root.val:
                return True, min(root.val, l_min, r_min), max(root.val, l_max, r_max)
            if root.left.val <= root.val <= root.right.val:
                return True, min(root.val, l_min, r_min), max(root.val, l_max, r_max)
            return False, 2 ** 32, -(2 ** 32)

        rv, *_ = helper(root)
        return rv
#+end_src
