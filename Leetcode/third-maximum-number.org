* Description
Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:

Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.

Example 2:

Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.

Example 3:

Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.
* Solution
#+begin_src python
class Solution:
    def thirdMax(self, nums: List[int]) -> int:
        m_v = set()
        nums = set(nums)
        m = None
        k=3
        if len(nums) < k:
            k = 1
        while True:
            for i in nums:
                if i not in m_v:
                    if m is not None:
                        m = max(m, i)
                    else:
                        m = i
            if len(m_v) == k-1:
                return m
            m_v.add(m)
            m = None

#+end_src
