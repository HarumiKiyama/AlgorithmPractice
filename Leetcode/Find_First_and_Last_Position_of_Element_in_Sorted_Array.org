* Description
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

* Solution
#+begin_src python
  class Solution:
      def searchRange(self, nums: List[int], target: int) -> List[int]:
          def _helper(start, end):
              if start == end and nums[start] != target:
                  return [-1, -1]
              if nums[start] == target and nums[end] == target:
                  return [start, end]
              mid = (start + end) // 2 + 1
              if nums[mid] > target:
                  return _helper(start, mid - 1)
              if nums[mid] < target:
                  return _helper(mid + 1, end)
              upper = mid
              latter = mid
              while upper >= 0 and nums[upper] == target:
                  upper -= 1
              upper += 1
              while latter <= end and nums[latter] == target:
                  latter += 1
              latter -= 1
              return [upper, latter]

          if len(nums) == 0:
              return [-1, -1]
          return _helper(0, len(nums) - 1)
#+end_src
