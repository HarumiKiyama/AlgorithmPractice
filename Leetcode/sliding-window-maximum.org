* Description
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7]
Explanation:

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Note:
You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?
* Solution
#+begin_src python
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        max_q = []
        q = []
        for i in range(k):
            q.append(nums[i])
            while len(max_q) > 0 and max_q[-1] < nums[i]:
                max_q.pop()
            max_q.append(nums[i])

        rv = [max_q[0]]
        for i in range(k, len(nums)):
            q.append(nums[i])
            t = q.pop(0)
            if max_q[0] == t:
                max_q.pop(0)
            while len(max_q) > 0 and max_q[-1] < nums[i]:
                max_q.pop()
            max_q.append(nums[i])
            rv.append(max_q[0])
        return rv
#+end_src
