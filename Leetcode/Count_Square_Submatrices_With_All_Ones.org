#+TITLE: Count_Square_Submatrices_With_All_Ones
* Description
Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.
Example 1:
Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation:
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.

Example 2:
Input: matrix =
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation:
There are 6 squares of side 1.
There is 1 square of side 2.
Total number of squares = 6 + 1 = 7.

Constraints:

    1 <= arr.length <= 300
    1 <= arr[0].length <= 300
    0 <= arr[i][j] <= 1
* Solution
#+begin_src python
class Solution:
    def countSquares(self, matrix):
        x = len(matrix)
        if x == 0:
            return 0
        y = len(matrix[0])
        if y == 0:
            return 0
        t = []
        for i in range(x):
            l = []
            for j in range(y):
                l.append(0)
            t.append(l)
        for i in range(x):
            for j in range(y):
                if i==0 or j == 0:
                    t[i][j] = matrix[i][j]
                elif matrix[i][j] == 1:
                    t[i][j] = min(min(t[i-1][j], t[i-1][j-1]), min(t[i][j-1], t[i-1][j-1]) + 1
                else:
                    t[i][j]=0
        rv = 0
        for i in t:
            for j in i:
                rv += j
        return rv
#+end_src
