* Description
Given a binary tree, each node has value 0 or 1.  Each root-to-leaf path represents a binary number starting with the most significant bit.  For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.

For all leaves in the tree, consider the numbers represented by the path from the root to that leaf.

Return the sum of these numbers.

Example 1:

Input: [1,0,1,0,1,0,1]
Output: 22
Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

Note:

    The number of nodes in the tree is between 1 and 1000.
    node.val is 0 or 1.
    The answer will not exceed 2^31 - 1.
* Solution
#+begin_src python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def sumRootToLeaf(self, root: TreeNode) -> int:
        rv = 0
        def _helper(root, v):
            nonlocal rv
            v = v * 2 + root.val
            if root.left is not None:
                _helper(root.left,v)
            if root.right is not None:
                _helper(root.right, v)
            if root.left is None and root.right is None:
                rv += v
                return
        if root is None:
            return rv
        _helper(root,0)
        return rv
#+end_src
