* Description
Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]

Follow up: Recursive solution is trivial, could you do it iteratively?
* Solution
#+begin_src python
class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        rv = []
        def _helper(root):
            if root is None:
                return
            rv.append(root.val)
            _helper(root.left)
            _helper(root.right)
        _helper(root)
        return rv
#+end_src

#+begin_src python
class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        rv = []
        if root is None:
            return rv
        stack = [root]
        while len(stack) > 0:
            node = stack.pop()
            rv.append(node.val)
            if node.right is not None:
                stack.append(node.right)
            if node.left is not None:
                stack.append(node.left)
        return rv
#+end_src
