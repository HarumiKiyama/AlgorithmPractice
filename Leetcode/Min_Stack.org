* Description
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    getMin() -- Retrieve the minimum element in the stack.

Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
* Solution
#+begin_src cpp
  class MinStack {
  public:
    /** initialize your data structure here. */
    int stack[100];
    int index;
    MinStack() { index = 0; }

    void push(int x) { stack[index++] = x; }

    void pop() { index--; }

    int top() { return stack[index]; }

    int getMin() {
      int rv = stack[0];
      for (int i = 0; i <= index; i++) {
        if (rv > stack[i])
          rv = i;
      }
      return rv;
    }
  };
#+end_src
