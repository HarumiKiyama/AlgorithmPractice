* Description
Given an n-ary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).
For example, given a 3-ary tree:
We should return its level order traversal:


[
     [1],
     [3,2,4],
     [5,6]
]

Note:

    The depth of the tree is at most 1000.
    The total number of nodes is at most 5000.

* Solution
#+BEGIN_SRC cpp
  #include <iostream>
  #include <queue>
  #include <vector>
  using namespace std;

  class Node {
  public:
    int val = NULL;
    vector<Node *> children;

    Node() {}

    Node(int _val, vector<Node *> _children) {
      val = _val;
      children = _children;
    }
  };
  class Solution {
  public:
    vector<vector<int>> levelOrder(Node *root) {
      if (root == nullptr)
        return {};
      vector<vector<int>> rv;
      queue<Node *> t;
      rv.push_back({root->val});
      for (auto i : root->children)
        t.push(i);
      while (!t.empty()) {
        queue<Node *> q;
        vector<int> temp;
        while (!t.empty()) {
          Node *k = t.front();
          t.pop();
          temp.push_back(k->val);
          for (auto i : k->children)
            q.push(i);
        }
        rv.push_back(temp);
        t = q;
      }
      return rv;
    }
  };
#+END_SRC
