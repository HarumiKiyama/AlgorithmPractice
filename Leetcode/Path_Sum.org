* Description
Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1

return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

* Solution
#+begin_src cpp
  #include <iostream>
  using namespace std;

  struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };
  class Solution {
  public:
    bool hasPathSum(TreeNode *root, int sum) {
      if (root == nullptr)
        return false;
      return helper(root, sum);
    }
    bool helper(TreeNode *root, int sum) {
      if (root->right == nullptr && root->left == nullptr) {
        if (sum == root->val)
          return true;
        return false;
      }
      if (root->right == nullptr)
        return helper(root->left, sum - root->val);
      if (root->left == nullptr)
        return helper(root->right, sum - root->val);
      return helper(root->left, sum - root->val) ||
             helper(root->right, sum - root->val);
    }
  };
#+end_src
