* Description
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

    Only constant extra memory is allowed.
    You may not alter the values in the list's nodes, only nodes itself may be changed.
* Solution
#+begin_src python
  class Solution:
      def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
          def _reverse(head):
              cur = head.next
              prev = head
              prev.next = None
              while cur is not None:
                  t = cur.next
                  cur.next = prev
                  prev = cur
                  cur = t
              return prev

          length = 0
          cur = head
          while cur is not None:
              cur = cur.next
              length += 1

          if length < k or k == 1:
              return head

          dummy = ListNode(None)
          tail = dummy
          cur = head
          for i in range(length // k):
              t = cur
              for _ in range(k - 1):
                  cur = cur.next
              l = cur
              cur = cur.next
              l.next = None
              tail.next = _reverse(t)
              tail = t
          tail.next = cur
          return dummy.next
#+end_src

#+RESULTS:
