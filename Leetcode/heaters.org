* Description
Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.

Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.

So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.

Note:

    Numbers of houses and heaters you are given are non-negative and will not exceed 25000.
    Positions of houses and heaters you are given are non-negative and will not exceed 10^9.
    As long as a house is in the heaters' warm radius range, it can be warmed.
    All the heaters follow your radius standard and the warm radius will the same.



Example 1:

Input: [1,2,3],[2]
Output: 1
Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.



Example 2:

Input: [1,2,3,4],[1,4]
Output: 1
Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.
* Solution
#+begin_src python
class Solution:
    def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        rv = 0
        i = j = 0
        while i < len(houses) and j < len(heaters):
            if houses[i] <= heaters[j]:
                rv = max(rv, heaters[j] - houses[i])
                i+= 1
            elif j < len(heaters)-1 and houses[i] > heaters[j] and houses[i] <= heaters[j+1]:
                cur = houses[i] - heaters[j]
                nex = heaters[j+1] - houses[i]
                rv = max(rv, min(cur,nex))
                if cur > nex:
                    j += 1
                i += 1
            elif j < len(heaters) -1:
                cur = houses[i] - heaters[j]
                nex = abs(heaters[j+1] - houses[i])
                if cur < nex:
                    rv = max(cur, rv)
                j+=1
            else:
                rv = max(rv, houses[i] - heaters[j])
                j += 1
        if j == len(heaters):
            rv = max(rv, abs(houses[-1] - heaters[-1]))
        return rv
#+end_src

#+begin_src python
class Solution(object):
    def findRadius(self, houses, heaters):
        """
        :type houses: List[int]
        :type heaters: List[int]
        :rtype: int
        """
        # 排序整理
        houses.sort()
        heaters.append(float("inf")) # 保证最终index不会越界
        heaters.sort()
        # 逐步往前逼近
        max_dist = 0
        index = 0
        for house in houses:
            while (house >= heaters[index]): # 当house大于heater时向右侧移动
                index += 1
            if index > 0: # house夹在了index-1和index之间
                curr_dist = min(heaters[index] - house, house - heaters[index-1])
            else: # index-1不合法，只需要比较一个值
                curr_dist = abs(heaters[index] - house)
            max_dist = max(max_dist, curr_dist) # 更新当前最大值

        return max_dist
#+end_src
