* Description
Given an array of integers A, a move consists of choosing any A[i], and incrementing it by 1.

Return the least number of moves to make every value in A unique.


Example 1:

Input: [1,2,2]
Output: 1
Explanation:  After 1 move, the array could be [1, 2, 3].

Example 2:

Input: [3,2,1,2,1,7]
Output: 6
Explanation:  After 6 moves, the array could be [3, 4, 1, 2, 5, 7].
It can be shown with 5 or less moves that it is impossible for the array to have all unique values.


Note:

    0 <= A.length <= 40000
    0 <= A[i] < 40000

* Solution
#+begin_src python
  class Solution:
      def minIncrementForUnique(self, A: List[int]) -> int:
          if len(A) <= 1:
              return 0
          rv = 0
          A.sort()
          for i in range(1, len(A)):
              if A[i] <= A[i-1]:
                  pre = A[i]
                  A[i] = A[i-1] + 1
                  rv += A[i] - pre
          return rv
#+end_src

#+begin_src rust
impl Solution {
    pub fn min_increment_for_unique(mut a: Vec<i32>) -> i32 {
        if a.len() <= 1 {
            return 0;
        }
        let mut rv = 0;
        for i in 1..a.len() {
            if a[i] <= a[i - 1] {
                let pre = a[i];
                a[i] = a[i - 1] + 1;
                rv += a[i] - pre;
            }
        }
        rv
    }
}
#+end_src
