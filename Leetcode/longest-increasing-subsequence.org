* Description
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Note:

    There may be more than one LIS combination, it is only necessary for you to return the length.
    Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?
* Solution
#+begin_src python :session solution1 :results output
from typing import List

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        N = len(nums)
        if N <= 1:
            return N
        lengths = [1] * N
        for i in range(N):
            for j in range(i):
                if nums[i] > nums[j]:
                    lengths[i] = max(lengths[j] + 1, lengths[i])
        return max(lengths)
#+end_src

#+begin_src python :session solution2
from typing import List

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        d = []
        for n in nums:
            if len(d) == 0 or n > d[-1]:
                d.append(n)
                continue
            l, r = 0, len(d) - 1
            loc = r
            while l <= r:
                mid = (l+r) // 2
                if d[mid] >= n:
                    loc = mid
                    r = mid - 1
                else:
                    l = mid + 1
            d[loc] = n
        return len(d)


#+end_src

#+begin_src python :session solution2 :results output
l = [1,3,6,7,9,4,10,5,6]
solution = Solution()
solution.lengthOfLIS(l)
#+end_src

