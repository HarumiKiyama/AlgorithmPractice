* Description
On a N * N grid, we place some 1 * 1 * 1 cubes.

Each value v = grid[i][j] represents a tower of v cubes placed on top of grid cell (i, j).

Return the total surface area of the resulting shapes.



Example 1:

Input: [[2]]
Output: 10

Example 2:

Input: [[1,2],[3,4]]
Output: 34

Example 3:

Input: [[1,0],[0,2]]
Output: 16

Example 4:

Input: [[1,1,1],[1,0,1],[1,1,1]]
Output: 32

Example 5:

Input: [[2,2,2],[2,1,2],[2,2,2]]
Output: 46

Note:

    1 <= N <= 50
    0 <= grid[i][j] <= 50
* Solution
#+begin_src python
class Solution:
    def surfaceArea(self, grid: List[List[int]]) -> int:
        n = len(grid)
        i=j=rv=0
        for i in range(n):
            for j in range(n):
                pile = grid[i][j]
                if pile == 0:
                    continue
                top = 0 if i == 0 else grid[i-1][j]
                left = 0 if j == 0 else grid[i][j-1]
                down = 0 if i == n-1 else grid[i+1][j]
                right = 0 if j == n-1 else grid[i][j+1]
                area = 2
                for k in (top, left, down, right):
                    area += max(pile-k, 0)
                rv += area
        return rv
#+end_src
