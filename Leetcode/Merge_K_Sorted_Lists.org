* Description
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
Example:
Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
* Solution
#+begin_src python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
from heapq import heappush, heappop
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        ListNode.__lt__ = lambda self, other: self.val < other.val
        def _helper(t1, t2, rv):
            if t1 is None:
                rv.next = t2
                return
            if t2 is None:
                rv.next = t1
                return
            if t1 > t2:
                t1, t2 = t2, t1
            rv.next = t1
            return _helper(t1.next, t2, rv.next)
        dummy = ListNode(None)
        if len(lists) == 0:
            return None
        if len(lists) == 1:
            return lists[0]
        if len(lists) == 2:
            _helper(lists[0],lists[1], dummy)
            return dummy.next
        n = len(lists)
        t1 = self.mergeKLists(lists[:n//2])
        t2 = self.mergeKLists(lists[n//2:])
        _helper(t1,t2, dummy)
        return dummy.next
#+end_src
