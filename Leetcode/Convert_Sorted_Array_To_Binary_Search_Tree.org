* Description
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
* Solution
#+begin_src cpp
  #include <iostream>
  #include <vector>
  using namespace std;

  struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };
  class Solution {
  public:
    TreeNode *sortedArrayToBST(vector<int> &nums) {
      TreeNode *root = nullptr;
      helper(root, nums, 0, nums.size() - 1);
      return root;
    }

    void helper(TreeNode *&root, vector<int> &nums, int l, int r) {
      if (l <= r) {
        int middle = (l + r) / 2;
        root = new TreeNode(nums[middle]);
        helper(root->left, nums, l, middle - 1);
        helper(root->right, nums, middle + 1, r);
      }
    }
  };
#+end_src
