* Description
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

    The same word in the dictionary may be reused multiple times in the segmentation.
    You may assume the dictionary does not contain duplicate words.

Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false
* Solution
** brutal
#+begin_src python
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        if len(s) == 0:
            return True

        for i in wordDict:
            if i == s[:len(i)] and self.wordBreak(s[len(i):], wordDict):
                    return True
        return False
#+end_src

** memoization
#+begin_src python
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        def helper(start):
            if start in memoization:
                return memoization[start]
            for i in wordDict:
                if i == s[start:start+len(i)]:
                    if helper(start+len(i)):
                        memoization[start] = True
                        return True
            memoization[start] = False
            return False
        memoization = {}
        memoization[len(s)] = True
        return helper(0)
#+end_src
