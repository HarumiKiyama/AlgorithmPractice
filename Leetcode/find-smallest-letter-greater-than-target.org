* Description
Given a list of sorted characters letters containing only lowercase letters, and given a target letter target, find the smallest element in the list that is larger than the given target.

Letters also wrap around. For example, if the target is target = 'z' and letters = ['a', 'b'], the answer is 'a'.

Examples:

Input:
letters = ["c", "f", "j"]
target = "a"
Output: "c"

Input:
letters = ["c", "f", "j"]
target = "c"
Output: "f"

Input:
letters = ["c", "f", "j"]
target = "d"
Output: "f"

Input:
letters = ["c", "f", "j"]
target = "g"
Output: "j"

Input:
letters = ["c", "f", "j"]
target = "j"
Output: "c"

Input:
letters = ["c", "f", "j"]
target = "k"
Output: "c"

Note:

    letters has a length in range [2, 10000].
    letters consists of lowercase letters, and contains at least 2 unique letters.
    target is a lowercase letter.
* Solution
#+begin_src python
class Solution:
    def nextGreatestLetter(self, letters: List[str], target: str) -> str:
        tail = letters[-1]
        if ord(tail) > ord(target):
            beg = 0
            end = len(letters) - 1
            while beg < end:
                mid = (beg+end) // 2
                if ord(letters[mid]) > ord(target):
                    end = mid - 1
                elif ord(letters[mid]) == ord(target):
                    beg=end=mid
                else:
                    beg = mid + 1
            for i in range(beg, len(letters)):
                if ord(letters[i]) > ord(target):
                    return letters[i]
        if ord(tail) <= ord(target):
            return letters[0]
#+end_src
