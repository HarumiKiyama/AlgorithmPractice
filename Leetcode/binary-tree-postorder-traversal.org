* Description
Given a binary tree, return the postorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]

Follow up: Recursive solution is trivial, could you do it iteratively?
* Solution
#+begin_src python
class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        rv = []
        def _helper(root):
            if root is None:
                return
            _helper(root.left)
            _helper(root.right)
            rv.append(root.val)
        _helper(root)
        return rv
#+end_src

#+begin_src java
class Solution {
  public List<Integer> postorderTraversal(TreeNode root) {
    LinkedList<TreeNode> stack = new LinkedList<>();
    LinkedList<Integer> output = new LinkedList<>();
    if (root == null) {
      return output;
    }

    stack.add(root);
    while (!stack.isEmpty()) {
      TreeNode node = stack.pollLast();
      output.addFirst(node.val);
      if (node.left != null) {
        stack.add(node.left);
      }
      if (node.right != null) {
        stack.add(node.right);
      }
    }
    return output;
  }
}
#+end_src

#+begin_src python
class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        rv = []
        if root is None:
            return rv
        stack = [root]
        while len(stack) > 0:
            node = stack.pop()
            rv.append(node.val)
            if node.left is not None:
                stack.append(node.left)
            if node.right is not None:
                stack.append(node.right)
        rv.reverse()
        return rv
#+end_src
