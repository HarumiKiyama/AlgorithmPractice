* Description
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:

    The length of num is less than 10002 and will be â‰¥ k.
    The given num does not contain any leading zero.

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
* Solution
#+begin_src python
class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        i = 0
        rv = []
        while i < len(num):
            if num[i] == '0' and len(rv) == 0:
                i += 1
                continue
            l = num[i:i+k+1]
            min_v = min(l)
            min_i = l.index(min_v)
            if min_v != num[i]:
                i += min_i
                k -= min_i
            else:
                rv.append(num[i])
                i += 1
        length = len(rv)
        if k >= length or length == 0:
            return '0'
        else:
            rv = rv[:length - k]
        return ''.join(rv)
#+end_src
