* Description
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

    Integers in each row are sorted from left to right.
    The first integer of each row is greater than the last integer of the previous row.

Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true

Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false
* Solution
#+begin_src python
  class Solution:
      def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
          def _search_row(row, start, end, target):
              if start >= end - 1:
                  return (row[start] == target) or (row[end] == target)
              middle = (start + end) // 2
              if row[middle] == target:
                  return True
              if row[middle] < target:
                  return _search_row(row, middle, end, target)
              return _search_row(row, start, middle, target)
          if len(matrix) == 0 or len(matrix[0])==0:
              return False
          length = len(matrix[0])
          for row in matrix:
              if row[0] <= target and row[-1] >= target:
                  if _search_row(row,0,length-1, target):
                      return True
          return False
#+end_src
