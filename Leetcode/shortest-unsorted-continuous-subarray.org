* Description
Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:

Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.

Note:

    Then length of the input array is in range [1, 10,000].
    The input array may contain duplicates, so ascending order here means <=.
* Solution
#+begin_src python
class Solution:
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        s_l = sorted(nums)
        for i in range(len(nums)):
            if nums[i] != s_l[i]:
                break
        for j in range(len(nums)-1, -1, -1):
            if nums[j] != s_l[j]:
                break
        if j > i:
            return j-i+1
        return 0
#+end_src


#+begin_src python
class Solution:
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        flag = False
        left_limit = right_limit = None
        for i in range(1, len(nums)):
            if nums[i] < nums[i+1]:
                flag = True
            if flag:
                if left_limit is None:
                    left_limit = nums[i]
                else:
                    left_limit = min(nums[i], left_limit)
        flag = False
        for j in range(len(nums)-2, -1, -1):
            if nums[i] > nums[i+1]:
                flag = True
            if flag:
                if right_limit is None:
                    right_limit = nums[i]
                else:
                    right_limit = max(right_limit, nums[i])
        for i in range(len(nums)):
            if left_limit < nums[i]:
                break

        for j in range(len(nums)-1, -1 ,-1):
            if right_limit > nums[i]:
                break
        return j - i + 1 if j > i else 0
#+end_src
