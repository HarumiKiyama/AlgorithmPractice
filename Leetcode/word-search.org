* Description
Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example:
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.
* Solution
#+begin_src python
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        if len(word) == 0:
            return True
        n = len(board)
        if n == 0:
            return False
        m = len(board[0])

        def _helper(p, word):
            if len(word) == 0:
                return True
            i, j = p
            if i >= n or j >= m or i < 0 or j < 0:
                return False
            if board[i][j] != word[0]:
                return False
            t = board[i][j]
            board[i][j] = None
            rest = word[1:]
            rv =  _helper((i, j+1) ,rest) or _helper((i+1,j), rest) or _helper((i-1, j), rest) or _helper((i,j-1), rest)
            board[i][j] = t
            return rv

        for i in range(n):
            for j in range(m):
                 if _helper((i,j), word):
                        return True
        return False
#+end_src
