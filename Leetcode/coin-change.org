* Description
You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:

Input: coins = [1, 2, 5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:

Input: coins = [2], amount = 3
Output: -1

Note:
You may assume that you have an infinite number of each kind of coin.
* Solution
#+begin_src python
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        if amount == 0:
            return 0
        coins.sort()
        dp = [2**32] * (amount+1)
        for i in range(1, amount+1):
            if i < coins[0]:
                continue
            if i in coins:
                dp[i] = 1
                continue
            for c in coins:
                n_i = i-c
                if n_i < 0:
                    continue
                else:
                    dp[i] = min(dp[i-c], dp[i])
            dp[i] += 1
        if dp[-1] >= 2**32:
            return -1
        return dp[-1]
#+end_src
