* Description
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
* Solution
#+begin_src python
class Solution:
    def trap(self, height: List[int]) -> int:
        def helper(s, end):
            if end - s <= 1:
                return 0
            v = height[s]
            for i in range(s+1, end+1):
                if height[i] >= v:
                    break
            else:
                height.reverse()
                return helper(0, end - s)
            return  calc(s, i) + helper(i, end)

        def calc(beg, end):
            rv = 0
            if end - beg <= 1:
                return rv
            min_v = height[beg]
            for i in range(beg+1, end):
                rv += min_v - height[i] if min_v > height[i] else 0
            return rv

        if len(height) == 0:
            return 0
        for i in range(len(height)):
            if height[i] > 0:
                break
        return helper(i, len(height) - 1)
#+end_src


#+begin_src cpp
int trap(vector<int>& height)
{
    int left = 0, right = height.size() - 1;
    int ans = 0;
    int left_max = 0, right_max = 0;
    while (left < right) {
        if (height[left] < height[right]) {
            height[left] >= left_max ? (left_max = height[left]) : ans += (left_max - height[left]);
            ++left;
        }
        else {
            height[right] >= right_max ? (right_max = height[right]) : ans += (right_max - height[right]);
            --right;
        }
    }
    return ans;
}
#+end_src
