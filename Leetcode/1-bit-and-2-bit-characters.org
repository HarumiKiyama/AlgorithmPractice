* Description
We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).

Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.

Example 1:

Input:
bits = [1, 0, 0]
Output: True
Explanation:
The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.

Example 2:

Input:
bits = [1, 1, 1, 0]
Output: False
Explanation:
The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.

Note:
1 <= len(bits) <= 1000.
bits[i] is always 0 or 1.
* Solution
#+begin_src python
class Solution:
    def isOneBitCharacter(self, bits: List[int]) -> bool:
        prev = 0
        for i in bits[:-1]:
            if prev == 0 and i == 1:
                prev = 1
            elif prev == 1:
                prev = 0
        return prev == 0
#+end_src

#+begin_src rust
impl Solution {
    pub fn is_one_bit_character(bits: Vec<i32>) -> bool {
        let mut prev = 0;
        for i in 0..bits.len() - 1{
            if prev == 1{
                prev = 0;
            }else if prev == 0 && bits[i] == 1{
                prev=1;
            }
        }
        prev == 0
}}
#+end_src
