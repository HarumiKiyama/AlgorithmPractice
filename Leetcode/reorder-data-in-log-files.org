* Description
You have an array of logs.  Each log is a space delimited string of words.

For each log, the first word in each log is an alphanumeric identifier.  Then, either:

    Each word after the identifier will consist only of lowercase letters, or;
    Each word after the identifier will consist only of digits.

We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.

Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.

Return the final order of the logs.

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]

Constraints:

    0 <= logs.length <= 100
    3 <= logs[i].length <= 100
    logs[i] is guaranteed to have an identifier, and a word after the identifier.
* Solution
#+begin_src python
class Solution:
    def reorderLogFiles(self, logs: List[str]) -> List[str]:
        i = j = len(logs) - 1
        while j >= 0:
            v = logs[j]
            if v.split(' ')[1].isdigit():
                logs[i], logs[j] = logs[j], logs[i]
                i-=1
            j -= 1

        def smaller(a,b):
            a = a.split(' ')[1:]
            b = b.split(' ')[1:]
            return a < b

        def quick_sort(beg, end):
            if beg >= end:
                return
            pivot = logs[end]
            j = beg
            for i in range(beg, end):
                if smaller(logs[i], pivot):
                    logs[i], logs[j] = logs[j], logs[i]
                    j += 1
            logs[j], logs[end] = logs[end], logs[j]
            quick_sort(beg, j-1)
            quick_sort(j+1, end)

        quick_sort(0, i)
        return logs
#+end_src
