* Description
Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3
* Solution
#+begin_src python
class Solution:
    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        def _helper(s, node):
            if len(s) == 0:
                s = '{}'.format(node.val)
            else:
                s = '{}->{}'.format(s, node.val)
            if node.left is None and node.right is None:
                return [s]
            if node.left is None:
                return _helper(s, node.right)
            if node.right is None:
                return _helper(s, node.left)
            right = _helper(s, node.right)
            left = _helper(s, node.left)
            right.extend(left)
            return right
        if root is None:
            return []
        return _helper('', root)
#+end_src
