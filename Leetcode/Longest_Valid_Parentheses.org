* Description
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Example 1:

Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"

Example 2:

Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"
* Solution
#+begin_src python :results output :session
  class Solution:
      def longestValidParentheses(self, s: str) -> int:
          if len(s) == 0:
              return 0
          stack = []
          for i, v in enumerate(s):
              if len(stack) > 0 and s[stack[-1]] == '(' and v == ')':
                  stack.pop()
              else:
                  stack.append(i)
          if len(stack) == 0:
              return len(s)
          rv = max(len(s) - 1 - stack[-1], stack[0])
          for i in range(1, len(stack)):
              rv = max(stack[i] - stack[i - 1] - 1, rv)

          return rv


  solution = Solution()
  print(solution.longestValidParentheses("()())"))
  print(solution.longestValidParentheses("()(()"))
  print(solution.longestValidParentheses("(()()(()()()(()"))
#+end_src

#+RESULTS:
: 4
: 2
: 6
