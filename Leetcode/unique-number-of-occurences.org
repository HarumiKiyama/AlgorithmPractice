* Description
Given an array of integers arr, write a function that returns true if and only if the number of occurrences of each value in the array is unique.

Example 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.

Example 2:

Input: arr = [1,2]
Output: false

Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true

Constraints:

    1 <= arr.length <= 1000
    -1000 <= arr[i] <= 1000
* Solution
#+begin_src cpp
#include<unordered_map>
#include<unordered_set>
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        unordered_map<int, int> dict;
        unordered_set<int> t;
        for (int i: arr){
            if (dict.find(i) != dict.end()){
                dict[i] += 1;
            }else{
                dict[i] = 1;
            }
        }
        for (const auto&i: dict){
            t.insert(i.second);
        }
        return t.size() == dict.size();
    }
};
#+end_src

#+begin_src rust
use std::collections::HashMap;
use std::collections::HashSet;
impl Solution {
    pub fn unique_occurrences(arr: Vec<i32>) -> bool {
        let mut d = HashMap::<i32,usize>::new();
        let mut s = HashSet::<usize>::new();
        for i in &arr{
            match d.get(i) {
                Some(v) => d.insert(*i, v+1),
                None => d.insert(*i,1)
            };
        }
        for (_, &i) in d.iter() {
            s.insert(i);
        }
        d.len() == s.len()
    }
}
#+end_src
