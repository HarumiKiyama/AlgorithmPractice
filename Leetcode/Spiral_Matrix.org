* Description
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
* Solution
#+begin_src python
  class Solution:
      def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
          m = len(matrix)
          if m == 0:
              return []
          n = len(matrix[0])
          rv = []
          row_begin = 0
          row_end = m - 1
          col_begin = 0
          col_end = n - 1

          while row_begin <= row_end and col_begin <= col_end:
              for i in range(col_begin, col_end+1):
                  rv.append(matrix[row_begin][i])
              row_begin += 1
              for i in range(row_begin, row_end+1):
                  rv.append(matrix[i][col_end])
              col_end -= 1

              if row_end >= row_begin:
                  for i in range(col_end, col_begin-1, -1):
                      rv.append(matrix[row_end][i])
                  row_end -= 1

              if col_end >= col_begin:
                  for i in range(row_end, row_begin-1 , -1):
                      rv.append(matrix[i][col_begin])
                  col_begin += 1
          return rv
#+end_src
