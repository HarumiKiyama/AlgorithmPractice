* Description
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Follow up:

    This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
    Would this affect the run-time complexity? How and why?
* Solution
#+begin_src python
class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        lo = 0
        hi = len(nums) -1
        while lo < hi:
            mid = (lo + hi) // 2
            if nums[mid] == target:
                return True
            if nums[mid] == nums[lo]:
                lo += 1
                continue
            if nums[lo] < nums[mid]:
                if nums[mid] > target and nums[lo] <= target:
                    hi = mid - 1
                else:
                    lo = mid + 1
            else:
                if nums[lo] > target and nums[mid] < target:
                    lo = mid + 1
                else:
                    hi = mid - 1
        return lo == hi and nums[lo] == target
#+end_src
