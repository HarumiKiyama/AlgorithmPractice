* Description
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
* Solution
#+begin_src python
  class Solution:
      def minPathSum(self, grid: List[List[int]]) -> int:
          m = len(grid)
          if m == 0:
              return 0
          n = len(grid[0])
          memoization ={}
          def _helper(i, j):
              key = '{}_{}'.format(i,j)
              if key in memoization:
                  return memoization[key]
              t = grid[i][j]
              if i == m - 1 and j == n-1:
                  rv = t
              elif i == m - 1:
                  rv = t + _helper(i, j+1)
              elif j == n-1:
                  rv = t + _helper(i+1 , j)
              else:
                  rv = t + min(_helper(i, j+1), _helper(i+1, j))
              memoization[key] = rv
              return rv

          rv = _helper(0,0)
          return rv
#+end_src
