* Description
A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because =128 % 1 == 0=, =128 % 2 == 0=, and =128 % 8 == 0=.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:

Input:
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]

Note:
The boundaries of each input argument are 1 <= left <= right <= 10000.
* Solution
#+BEGIN_SRC cpp
  #include <iostream>
  #include <vector>
  using namespace std;

  class Solution {
  public:
    vector<int> selfDividingNumbers(int left, int right) {
      vector<int> res;
      while (left <= right) {
        int temp = left;
        bool accept = true;
        while (temp > 1) {
          if (temp % 10 == 0 || left % (temp % 10) != 0) {
            accept = false;
            break;
          } else {
            temp = temp / 10;
          }
        }
        if (accept) {
          res.push_back(left);
        }
        left++;
      }
      return res;
    }
  };

  int main(int argc, char *argv[]) {
    Solution solution = Solution();
    vector<int> res = solution.selfDividingNumbers(1, 22);
    for (auto i : res) {
      cout << i << endl;
    }
    return 0;
  }
#+END_SRC

#+RESULTS:
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
|  6 |
|  7 |
|  8 |
|  9 |
| 11 |
| 12 |
| 15 |
| 22 |
