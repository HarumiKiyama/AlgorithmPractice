* Description
Given an N x N grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized and return the distance.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

If no land or water exists in the grid, return -1.

Example 1:

Input: [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation:
The cell (1, 1) is as far as possible from all the land with distance 2.

Example 2:

Input: [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation:
The cell (2, 2) is as far as possible from all the land with distance 4.

Note:

    1 <= grid.length == grid[0].length <= 100
    grid[i][j] is 0 or 1
* Solution
#+begin_src cpp
class Solution {
public:
  static constexpr int MAX_N = 100 + 5;
  static constexpr int INF = int(1E6);
  static constexpr int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};

  int n;
  int d[MAX_N][MAX_N];

  struct Status {
    int v, x, y;
  };

  queue<Status> q;

  int maxDistance(vector<vector<int>> &grid) {
    this->n = grid.size();
    auto &a = grid;

    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        d[i][j] = INF;
      }
    }

    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        if (a[i][j]) {
          d[i][j] = 0;
          q.push({0, i, j});
        }
      }
    }

    while (!q.empty()) {
      auto f = q.front(); q.pop();
      for (int i = 0; i < 4; ++i) {
        int nx = f.x + dx[i], ny = f.y + dy[i];
        if (!(nx >= 0 && nx <= n - 1 && ny >= 0 && ny <= n - 1))
          continue;
        if (f.v + 1 < d[nx][ny]) {
          d[nx][ny] = f.v + 1;
          q.push({d[nx][ny], nx, ny});
        }
      }
    }

    int ans = -1;
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        if (!a[i][j])
          ans = max(ans, d[i][j]);
      }
    }

    return (ans == INF) ? -1 : ans;
  }
};
#+end_src
