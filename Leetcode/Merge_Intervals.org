* Description
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.
* Solution
#+begin_src python
  class Solution:
      def merge(self, intervals: List[List[int]]) -> List[List[int]]:
          intervals.sort(key=lambda x: x[0])
          rv = []
          if len(intervals) == 0:
              return []
          t = intervals[0]
          i = 1
          while i < len(intervals):
              if len(t) == 0 and i + 1 < len(
                      intervals) and intervals[i][1] >= intervals[i + 1][0]:
                  t = [intervals[i][0], intervals[i + 1][1] if intervals[i+1][1] > intervals[i][1] else intervals[i][1]]
                  i += 2
                  continue
              if len(t) > 0 and intervals[i][0] <= t[1]:
                  if intervals[i][1] > t[1]:
                      t.pop()
                      t.append(intervals[i][1])
              elif len(t) > 0:
                  rv.append(t)
                  t = intervals[i]
              else:
                  t = intervals[i]
              i += 1
          if len(t) > 0:
              rv.append(t)
          return rv
#+end_src

#+begin_src python
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x: x[0])

        merged = []
        for interval in intervals:
            # 如果列表为空，或者当前区间与上一区间不重合，直接添加
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
                # 否则的话，我们就可以与上一区间进行合并
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged
#+end_src
