* Description
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1

Example 2:

Input: [2,2,2,0,1]
Output: 0

Note:

    This is a follow up problem to Find Minimum in Rotated Sorted Array.
    Would allow duplicates affect the run-time complexity? How and why?
* Solution
#+begin_src python
class Solution:
    def findMin(self, nums: List[int]) -> int:
        beg = 0
        end = len(nums) - 1
        if nums[beg] < nums[end]:
            return nums[beg]
        while end - beg > 1:
            mid = (beg + end) // 2
            if nums[beg] == nums[mid]:
                beg += 1
                if nums[0] > nums[beg]:
                    return nums[beg]
                continue
            if nums[beg] > nums[mid]:
                end = mid
            else:
                beg = mid
        return min(nums[beg], nums[end])
#+end_src
