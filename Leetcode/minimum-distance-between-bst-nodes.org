* Description
Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.

Example :

Input: root = [4,2,6,1,3,null,null]
Output: 1
Explanation:
Note that root is a TreeNode object, not an array.

The given tree [4,2,6,1,3,null,null] is represented by the following diagram:

          4
        /   \
      2      6
     / \
    1   3

while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.

Note:

    The size of the BST will be between 2 and 100.
    The BST is always valid, each node's value is an integer, and each node's value is different.
* Solution
#+begin_src python
class Solution:
    def minDiffInBST(self, root: TreeNode) -> int:
        rv = None
        prev = None
        def _helper(root):
            if root is None:
                return
            nonlocal rv, prev
            _helper(root.left)
            if prev is None:
                prev = root.val
            elif rv is None:
                rv = root.val - prev
            else:
                rv = min(rv, root.val - prev)
            prev = root.val
            _helper(root.right)
        _helper(root)
        return rv
#+end_src
