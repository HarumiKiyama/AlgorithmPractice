* Description
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

* Solution
#+begin_src python
  class DoubleLinkedNode:
      def __init__(self, key, val,next, prev):
          self.val = val
          self.key = key
          self.next = next
          self.prev = prev


  class LRUCache:
      def __init__(self, capacity: int):
          self.capacity = capacity
          self._data = {}
          self.head = None
          self.tail = None
          self.length = 0

      def get(self, key: int) -> int:
          node = self._data.get(key)
          if node is None:
              return -1
          self._move_to_head(node)
          return node.val

      def put(self, key: int, value: int) -> None:
          if key in self._data:
              node = self._data[key]
              node.val = value
              self._move_to_head(node)
          elif self.length == self.capacity:
              self._remove_tail()
              node = DoubleLinkedNode(key, value, None, None)
              self._data[key] = node
              if self.head is None or self.tail is None:
                  self.head = node
                  self.tail = node
              else:
                  node.next = self.head
                  self.head.prev = node
                  self.head = node
          else:
              self.length += 1
              node = DoubleLinkedNode(key, value, None, None)
              self._data[key]=node
              if self.head is None or self.tail is None:
                  self.head = node
                  self.tail = node
              else:
                  node.next = self.head
                  self.head.prev = node
                  self.head = node
      def _move_to_head(self, node):
          if self.head is node:
              return

          prev = node.prev
          next = node.next

          self.head.prev = node
          node.next = self.head
          self.head = node

          if self.tail is node:
              prev.next = None
              self.tail = node.prev
              return
          next.prev = prev
          prev.next = next

      def _remove_tail(self):
          if self.tail is None:
              return
          prev = self.tail.prev
          if prev is None:
              del self._data[self.tail.key]
              del self.tail
              self.head = None
              self.tail = None
              return

          del self._data[self.tail.key]
          self.tail = prev
          del prev.next
#+end_src
