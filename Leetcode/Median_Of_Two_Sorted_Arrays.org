* Description
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0

Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
* Solution
#+begin_src python
  class Solution:
      def findMedianSortedArrays(self, nums1: List[int],
                                 nums2: List[int]) -> float:
          n, m = len(nums1), len(nums2)
          if n < m:
              n, m, nums1, nums2 = m, n, nums2, nums1
          if n == 0:
              if m % 2 == 0:
                  return (nums2[m // 2] + nums2[m // 2 - 1]) / 2
              return nums2[m // 2]
          imin, imax, half_len = 0, m, (m + n + 1) // 2
          while imin <= imax:
              i = (imin + imax) // 2
              j = half_len - i
              if i < m and nums2[j - 1] > nums1[i]:
                  imin = i + 1
              elif i > 0 and num1[i - 1] > nums2[j]:
                  imax = i - 1
              else:
                  if i == 0:
                      max_of_left = nums2[j - 1]
                  elif j == 0:
                      max_of_left = nums1[i - 1]
                  else:
                      max_of_left = max(nums1[i - 1], nums2[j - 1])

                  if (m + n) % 2 == 1:
                      return max_of_left
                  if i == m:
                      min_of_right = nums2[j]
                  elif j == n:
                      min_of_right = nums1[i]
                  else:
                      min_of_right = min(nums1[i], nums2[j])
                  return (max_of_left + min_of_right) / 2
#+end_src
