* Description
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]

* Solution
#+begin_src cpp
  #include <iostream>
  #include <queue>
  #include <vector>
  using namespace std;

  struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };
  class Solution {
  public:
    vector<vector<int>> levelOrderBottom(TreeNode *root) {
      if (root == nullptr)
        return {};
      vector<vector<int>> rv{};
      rv.insert(rv.begin(), {root->val});
      queue<TreeNode *> nodes;
      nodes.push(root->left);
      nodes.push(root->right);
      while (!nodes.empty()) {
        queue<TreeNode *> n;
        vector<int> temp;
        while (!nodes.empty()) {
          if (nodes.front() != nullptr) {
            TreeNode *t = nodes.front();
            temp.push_back(t->val);
            n.push(t->left);
            n.push(t->right);
          }
          nodes.pop();
        }
        nodes = n;
        if (temp.size()>0)
          rv.insert(rv.begin(), temp);
      }
      return rv;
    }
  };
#+end_src
