* Description
Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4

Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5
* Solution
#+begin_src python
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.next = None

  class Solution:
      def sortList(self, head: ListNode) -> ListNode:
          def split(head,n):
              i = 1
              while head is not None and i < n:
                  head = head.next
                  i += 1
              if head is None:
                  return None
              second = head.next
              head.next = None
              return second
          def merge(l1, l2, head):
              cur = head
              while l1 is not None and l2 is not None:
                  if l1.val > l2.val:
                      cur.next=l2
                      cur = l2
                      l2 = l2.next
                  else:
                      cur.next = l1
                      cur = l1
                      l1 = l1.next
              cur.next = (l1 if l1 is not None else l2)
              while cur.next is not None:
                  cur = cur.next
              return cur

          if head is None or head.next is None:
              return head
          cur = head
          length = 0
          while cur is not None:
              length += 1
              cur = cur.next
          dummy = ListNode(0)
          dummy.next = head
          step = 1
          while step < length:
              cur = dummy.next
              tail = dummy
              while cur is not None:
                  left = cur
                  right = split(left, step)
                  cur = split(right,step)
                  tail =merge(left, right, tail)
              step *= 2
          return dummy.next
#+end_src

#+begin_src cpp
  /**
   ,* Merge sort use bottom-up policy,
   ,* so Space Complexity is O(1)
   ,* Time Complexity is O(NlgN)
   ,* stable sort
  ,*/
  class Solution {
  public:
      ListNode *sortList(ListNode *head) {
          if(!head || !(head->next)) return head;

          //get the linked list's length
          ListNode* cur = head;
          int length = 0;
          while(cur){
              length++;
              cur = cur->next;
          }

          ListNode dummy(0);
          dummy.next = head;
          ListNode *left, *right, *tail;
          for(int step = 1; step < length; step <<= 1){
              cur = dummy.next;
              tail = &dummy;
              while(cur){
                  left = cur;
                  right = split(left, step);
                  cur = split(right,step);
                  tail = merge(left, right, tail);
              }
          }
          return dummy.next;
      }
  private:
      /**
       ,* Divide the linked list into two lists,
       ,* while the first list contains first n ndoes
       ,* return the second list's head
       ,*/
      ListNode* split(ListNode *head, int n){
          //if(!head) return NULL;
          for(int i = 1; head && i < n; i++) head = head->next;

          if(!head) return NULL;
          ListNode *second = head->next;
          head->next = NULL;
          return second;
      }
      /**
        ,* merge the two sorted linked list l1 and l2,
        ,* then append the merged sorted linked list to the node head
        ,* return the tail of the merged sorted linked list
       ,*/
      ListNode* merge(ListNode* l1, ListNode* l2, ListNode* head){
          ListNode *cur = head;
          while(l1 && l2){
              if(l1->val > l2->val){
                  cur->next = l2;
                  cur = l2;
                  l2 = l2->next;
              }
              else{
                  cur->next = l1;
                  cur = l1;
                  l1 = l1->next;
              }
          }
          cur->next = (l1 ? l1 : l2);
          while(cur->next) cur = cur->next;
          return cur;
      }
  };
#+end_src
