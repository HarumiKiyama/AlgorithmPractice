* Description
Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.



Example 1:

Input: s = "eleetminicoworoep"
Output: 13
Explanation: The longest substring is "leetminicowor" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.

Example 2:

Input: s = "leetcodeisgreat"
Output: 5
Explanation: The longest substring is "leetc" which contains two e's.

Example 3:

Input: s = "bcbcbc"
Output: 6
Explanation: In this case, the given string "bcbcbc" is the longest because all vowels: a, e, i, o and u appear zero times.

Constraints:

    1 <= s.length <= 5 x 10^5
    s contains only lowercase English letters.
* Solution
#+begin_src python
from collections import defaultdict
class Solution:
    def findTheLongestSubstring(self, s: str) -> int:
        pre = [None] * 32
        pre[0] = -1
        length = len(s)
        cur = rv = 0
        for i,v in enumerate(s):
            if v == 'a':
                cur ^= 1
            elif v == 'e':
                cur ^= 2
            elif v =='i':
                cur ^= 4
            elif v =='o':
                cur ^= 8
            elif v == 'u':
                cur ^= 16
            if pre[cur] is None:
                pre[cur] = i
            else:
                rv = max(rv, i-pre[cur])
        return rv

#+end_src

#+begin_src cpp
class Solution {
public:
    int findTheLongestSubstring(string s) {
        vector<int> pre(32,INT_MAX);
        pre[0]=-1;
        const int N=s.size();
        int cur=0;
        int ans=0;
        for(int i=0;i<N;++i){
            switch(s[i]){
                case 'a':cur^=1;break;
                case 'e':cur^=2;break;
                case 'i':cur^=4;break;
                case 'o':cur^=8;break;
                case 'u':cur^=16;break;
                default:break;
            }
            if(pre[cur]==INT_MAX) pre[cur]=i;
            else ans=max(ans,i-pre[cur]);
        }
        return ans;
    }
};
#+end_src

#+begin_src rust
impl Solution {
    pub fn find_the_longest_substring(s: String) -> i32 {
        let mut dp:Vec<i32> = vec![-1];
        let mut cur = 0;
        let mut rv = 0;
        for i in 1..32{
            dp.push(s.len() as i32);
        }
        for (i,v) in s.chars().enumerate(){
            cur = match v {
                'a' => cur ^ 1,
                'e' => cur ^ 2,
                'i' => cur^4,
                'o' => cur^8,
                'u' => cur ^ 16,
                _ => cur,
            };
            if dp[cur] == s.len() as i32{
                dp[cur] = i as i32;
            }else{
                rv = i32::max(rv, (i as i32)-dp[cur]);
            }
        }
        rv
    }
}
#+end_src
