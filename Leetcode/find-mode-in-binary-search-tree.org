* Description
Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than or equal to the node's key.
    The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
    Both the left and right subtrees must also be binary search trees.

For example:
Given BST [1,null,2,2],

   1
    \
     2
    /
   2



return [2].

Note: If a tree has more than one mode, you can return them in any order.

Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).
* Solution
#+begin_src python
class Solution:
    def findMode(self, root: TreeNode) -> List[int]:
        if root is None:
            return []
        rv = []
        max_count = 0
        cur_count = 0
        cur_v = None
        def _helper(root):
            if root is None:
                return
            nonlocal cur_count, max_count, rv, cur_v
            _helper(root.left)
            if root.val != cur_v:
                cur_count = 1
            else:
                cur_count += 1
            if cur_count > max_count:
                max_count = cur_count
                rv = [root.val]
            elif cur_count == max_count:
                rv.append(root.val)
            cur_v = root.val
            _helper(root.right)

        rv.append(cur_v)
        _helper(root)
        return rv
#+end_src
