* Description
Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.

Example 1:

Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].

Note:

    The range of node's value is in the range of 32-bit signed integer.
* Solution
#+BEGIN_SRC cpp
    #include <queue>
    #include <vector>
    using namespace std;

    struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
    };
    class Solution {
    public:
      vector<double> averageOfLevels(TreeNode *root) {
        vector<double> rv;
        queue<TreeNode *> temp;
        temp.push(root);
        while (!temp.empty()) {
          int count{0};
          long int sum{0};
          queue<TreeNode *> q;
          while (!temp.empty()) {
            TreeNode *t = temp.front();
            temp.pop();
            sum += t->val;
            count++;
            if (t->left != nullptr)
              q.push(t->left);
            if (t->right != nullptr)
              q.push(t->right);
          }
          temp = q;
          rv.push_back(sum / (double)count);
        }
        return rv;
      }
    };
#+END_SRC
