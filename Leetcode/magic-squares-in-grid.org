* Description
A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.

Given an grid of integers, how many 3 x 3 "magic square" subgrids are there?  (Each subgrid is contiguous).

Example 1:

Input: [[4,3,8,4],
        [9,5,1,9],
        [2,7,6,2]]
Output: 1
Explanation:
The following subgrid is a 3 x 3 magic square:
438
951
276

while this one is not:
384
519
762

In total, there is only one magic square inside the given grid.

Note:

    1 <= grid.length <= 10
    1 <= grid[0].length <= 10
    0 <= grid[i][j] <= 15
* Solution
#+begin_src python
class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        if len(grid) < 3 or len(grid[0]) < 3:
            return 0
        rv = 0
        s = {
            816357492, 834159672, 618753294,
            672159834, 492357816, 438951276,
            294753618, 276951438,
        }
        offset = [
            [-2, -2], [-2, -1], [-2, 0],
            [-1, -2], [-1, -1], [-1, 0],
            [0, -2], [0, -1], [0, 0],
        ]
        for i in range(2, len(grid)):
            for j in range(2, len(grid)):
                sum = 0
                for k in range(9):
                    sum *= 10
                    sum += grid[i + offset[k][0]][j+offset[k][1]];
                rv += 1 if sum in s else 0
        return rv
#+end_src

#+begin_src java
class Solution {
public:
    int numMagicSquaresInside(const vector<vector<int>>& grid) {
        const unordered_set<int> s{816357492, 834159672, 618753294, 672159834,
                                   492357816, 438951276, 294753618, 276951438};
        const int offset[][2] = {{-2, -2}, {-2, -1}, {-2, 0},
                                 {-1, -2}, {-1, -1}, {-1, 0},
                                 { 0, -2}, { 0, -1}, { 0, 0}};
        int ans = 0;
        for (int i = 2; i < grid.size(); ++i) {
            for (int j = 2; j < grid.size(); ++j) {
                int sum = 0;
                for (int k = 0; k < 9; ++k) {
                    sum *= 10;
                    sum += grid[i + offset[k][0]][j + offset[k][1]];
                }
                ans += s.count(sum);
            }
        }
        return ans;
    }
};
#+end_src
