* Description
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

    a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7

Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4

Return false.
* Solution
#+begin_src python
  # Definition for a binary tree node.
  # class TreeNode(object):
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None


  class Solution(object):
      def isBalanced(self, root):
          """
          :type root: TreeNode
          :rtype: bool
          """
          try:
              self._helper(root)
          except KeyError:
              return False
          else:
              return True


      def _helper(self, root):
          if root is None:
              return 0
          right_length = self._helper(root.right)
          left_length = self._helper(root.left)
          if abs(right_length - left_length) > 1:
              raise KeyError
          return max(right_length, left_length) + 1
#+end_src
