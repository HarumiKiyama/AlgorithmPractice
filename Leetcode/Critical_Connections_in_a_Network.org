* Description
There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.

Example 1:

Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.



Constraints:

    1 <= n <= 10^5
    n-1 <= connections.length <= 10^5
    connections[i][0] != connections[i][1]
    There are no repeated connections.
* Solution
#+begin_src python
  class Solution(object):
      def criticalConnections(self, n, connections):
          graph = {}
          for i,j in connections:
              graph.setdefault(i,[]).append(j)
              graph.setdefault(j,[]).append(i)

          connections = set(map(tuple, (map(sorted, connections))))
          rank = [-2] * n

          def dfs(node, depth):
              if rank[node] >= 0:
                  # visiting (0<=rank<n), or visited (rank=n)
                  return rank[node]
              rank[node] = depth
              min_back_depth = n
              for neighbor in graph[node]:
                  if rank[neighbor] == depth - 1:
                      continue  # don't immmediately go back to parent. that's why i didn't choose -1 as the special value, in case depth==0.
                  back_depth = dfs(neighbor, depth + 1)
                  if back_depth <= depth:
                      connections.discard(tuple(sorted((node, neighbor))))
                  min_back_depth = min(min_back_depth, back_depth)
              rank[node] = n  # this line is not necessary. see the "brain teaser" section below
              return min_back_depth
          dfs(0, 0)  # since this is a connected graph, we don't have to loop over all nodes.
          return list(connections)
#+end_src

#+begin_src python
  class Solution(object):
      def criticalConnections(self, n, connections):
          """
          :type n: int
          :type connections: List[List[int]]
          :rtype: List[List[int]]
          """
          g = {}
          for u, v in connections:
              g.setdefault(u, []).append(v)
              g.setdefault(v, []).append(u)

          N = len(connections)
          lev = [None] * N
          low = [None] * N

          def dfs(node, par, level):
              # already visited
              if lev[node] is not None:
                  return

              lev[node] = low[node] = level
              for nei in g[node]:
                  if not lev[nei]:
                      dfs(nei, node, level + 1)

              # minimal level in the neignbors, exclude the parent
              cur = min([level] + [low[nei] for nei in g[node] if nei != par])
              low[node] = cur

          dfs(0, None, 0)

          ans = []
          for u, v in connections:
              if low[u] > lev[v] or low[v] > lev[u]:
                  ans.append([u, v])
          return ans
#+end_src

#+RESULTS:
: None
