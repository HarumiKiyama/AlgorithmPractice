* Description
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3

Note:
Bonus points if you could solve it both recursively and iteratively.
* Solution
#+begin_src cpp
  #include <iostream>
  using namespace std;

  struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };
  class Solution {
  public:
    bool isSymmetric(TreeNode *root) {
      if (root == nullptr)
        return true;
      return helper(root->left, root->right);
    }
    bool helper(TreeNode *left, TreeNode *right) {
      if (left == nullptr && right == nullptr)
        return true;
      if (left == nullptr || right == nullptr)
        return false;
      return left->val == right->val && helper(left->right, right->left) &&
             helper(left->left, right->right);
    }
  };
#+end_src
