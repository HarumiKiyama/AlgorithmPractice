* Description
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:

Input: [1, 2, 2, 3, 1]
Output: 2
Explanation:
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.

Example 2:

Input: [1,2,2,3,1,4,2]
Output: 6

Note:
nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.
* Solution
#+begin_src python
class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        d = {}
        for i, v in enumerate(nums):
            if v in d:
                d[v][0] += 1
                d[v][2] = i
            else:
                d[v] = [1, i, i]
        max_degree = 0
        rv = 0
        for n, beg, end in d.values():
            if n > max_degree:
                rv = end- beg + 1
                max_degree = n
            elif n == max_degree:
                rv = min(rv, end - beg + 1)
        return rv
#+end_src
