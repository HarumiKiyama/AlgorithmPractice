* Description
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:

Input: [1, 2, 2, 3, 1]
Output: 2
Explanation:
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.

Example 2:

Input: [1,2,2,3,1,4,2]
Output: 6

Note:
nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.
* Solution
#+begin_src python
class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        d = {}
        for i in nums:
            d[i] = d.get(i,0) + 1
        max_k = []
        max_degree = 0
        for k,v in d.items():
            if max_degree == v:
                max_k.append(k)
            elif max_degree < v:
                max_k.clear()
                max_k.append(k)
                max_degree = v
        rv = 50000
        for i in max_k:
            for j in range(len(nums)):
                if nums[j] == i:
                    break
            for k in range(len(nums)-1, -1, -1):
                if nums[k] == i:
                    break
            rv = min(rv, k - j + 1)
        return rv
#+end_src
