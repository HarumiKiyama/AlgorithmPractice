* Description
Design a HashSet without using any built-in hash table libraries.

To be specific, your design should include these functions:

    add(value): Insert a value into the HashSet.
    contains(value) : Return whether the value exists in the HashSet or not.
    remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.

Example:

MyHashSet hashSet = new MyHashSet();
hashSet.add(1);
hashSet.add(2);
hashSet.contains(1);    // returns true
hashSet.contains(3);    // returns false (not found)
hashSet.add(2);
hashSet.contains(2);    // returns true
hashSet.remove(2);
hashSet.contains(2);    // returns false (already removed)

Note:

    All values will be in the range of [0, 1000000].
    The number of operations will be in the range of [1, 10000].
    Please do not use the built-in HashSet library.
* Solution
#+begin_src python
class MyHashSet:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.max_size = 10000
        self._v = [[] for i in range(self.max_size)]

    def index(self, key):
        return hash(key) & (self.max_size - 1)


    def add(self, key: int) -> None:
        index = self.index(key)
        l = self._v[index]
        if key not in l:
            l.append(key)

    def remove(self, key: int) -> None:
        index = self.index(key)
        l = self._v[index]
        if key in l:
            l.remove(key)

    def contains(self, key: int) -> bool:
        """
        Returns true if this set contains the specified element
        """
        index = self.index(key)
        l = self._v[index]
        return key in l
       
#+end_src

#+begin_src cpp
class MyHashSet {
public:
    /** Initialize your data structure here. */
    vector<uint32_t> items;
    MyHashSet() : items(31251, 0) {

    }

    void add(int key) {
        items[key >> 5] |= 1 << (key & 0b11111);
    }

    void remove(int key) {
        items[key >> 5] &= ~(1 << (key & 0b11111));
    }

    /** Returns true if this set contains the specified element */
    bool contains(int key) {
        return items[key >> 5] & 1 << (key & 0b11111);
    }
};
#+end_src

#+begin_src rust
struct MyHashSet {
    v : Box<Vec<u64>>
}


/**
 ,* `&self` means the method takes an immutable reference.
 ,* If you need a mutable reference, change it to `&mut self` instead.
 ,*/
impl MyHashSet {

    /** Initialize your data structure here. */
    fn new() -> Self {
        let size = 15626;
        let v : Vec<u64> = vec![0; size];
        MyHashSet {
            v : Box::new(v)
        }
    }

    fn add(& mut self, key: i32) {
        self.v[(key >> 10) as usize] |= 1 << (key&0b1111111111);
    }

    fn remove(& mut self, key: i32) {
        self.v[(key >> 10) as usize] &= !(1 << (key&0b1111111111))
    }

    /** Returns true if this set contains the specified element */
    fn contains(&self, key: i32) -> bool {
        (self.v[(key >> 10) as usize] & 1 << (key & 0b1111111111)) != 0
    }
}
#+end_src
