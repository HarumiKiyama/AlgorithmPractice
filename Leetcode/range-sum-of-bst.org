* Description
Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32

Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23

Note:
    The number of nodes in the tree is at most 10000.
    The final answer is guaranteed to be less than 2^31.

* Solution
#+begin_src python
class Solution:
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:
        rv = 0
        def _helper(root):
            if root is None:
                return
            nonlocal rv
            if root.val >= L:
                _helper(root.left)
            if root.val >= L and root.val <= R:
                rv += root.val
            if root.val <= R:
                _helper(root.right)
        _helper(root)
        return rv

#+end_src
