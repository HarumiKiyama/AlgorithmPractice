* Description
You are given two strings s and t of the same length. You want to change s to t. Changing the i-th character of s to i-th character of t costs |s[i] - t[i]| that is, the absolute difference between the ASCII values of the characters.

You are also given an integer maxCost.

Return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of twith a cost less than or equal to maxCost.

If there is no substring from s that can be changed to its corresponding substring from t, return 0.



Example 1:

Input: s = "abcd", t = "bcdf", maxCost = 3
Output: 3
Explanation: "abc" of s can change to "bcd". That costs 3, so the maximum length is 3.

Example 2:

Input: s = "abcd", t = "cdef", maxCost = 3
Output: 1
Explanation: Each character in s costs 2 to change to charactor in t, so the maximum length is 1.

Example 3:

Input: s = "abcd", t = "acde", maxCost = 0
Output: 1
Explanation: You can't make any change, so the maximum length is 1.

Constraints:

    1 <= s.length, t.length <= 10^5
    0 <= maxCost <= 10^6
    s and t only contain lower case English letters.
* Solution
#+begin_src python :session :results output
class Solution:
    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:
        length = len(s)
        rv = 0
        cur_len = 0
        cur_cost = 0
        for i in range(length):
            k = abs(ord(s[i]) - ord(t[i]))
            while cur_cost + k > maxCost and cur_len>0:
                cur_cost -= abs(ord(s[i-cur_len])- ord(t[i-cur_len]))
                cur_len -= 1
            if cur_len == 0 and cur_cost+k > maxCost:
                continue
            cur_cost += k
            cur_len += 1
            rv = max(rv, cur_len)
        return rv
#+end_src
