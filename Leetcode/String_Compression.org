* Description
Given an array of characters, compress it in-place.

The length after compression must always be smaller than or equal to the original array.

Every element of the array should be a character (not int) of length 1.

After you are done modifying the input array in-place, return the new length of the array.

Follow up:
Could you solve it using only O(1) extra space?

Example 1:

Input:
["a","a","b","b","c","c","c"]

Output:
Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

Explanation:
"aa" is replaced by "a2". "bb" is replaced by "b2". "ccc" is replaced by "c3".

Example 2:

Input:
["a"]

Output:
Return 1, and the first 1 characters of the input array should be: ["a"]

Explanation:
Nothing is replaced.

Example 3:

Input:
["a","b","b","b","b","b","b","b","b","b","b","b","b"]

Output:
Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].

Explanation:
Since the character "a" does not repeat, it is not compressed. "bbbbbbbbbbbb" is replaced by "b12".
Notice each digit has it's own entry in the array.

Note:

    All characters have an ASCII value in [35, 126].
    1 <= len(chars) <= 1000.

* Solution
#+BEGIN_SRC cpp
  #include <iostream>
  #include <math.h>
  #include <sstream>
  #include <vector>
  using namespace std;

  class Solution {
  public:
    int compress(vector<char> &chars) {
      if (chars.size() <= 1)
        return chars.size();
      int length = 0;
      char former_char = chars[0];
      bool count_num = false;
      for (int i = 1; i < chars.size(); i++) {
        if (chars[i] == former_char) {
          if (!count_num) {
            length++;
            chars[length] = '0' + 2;
            count_num = true;
          } else if (chars[length] == '9') {
            int j = length;
            ostringstream oss;
            for (; j >= 0; j--) {
              if (chars[j] == former_char)
                break;
            }
            for (int i= j + 1; i <= length; i++) {
              oss << chars[i];
            }
            int num = stoi(oss.str()) + 1;
            istringstream iss(to_string(num));
            if (iss.str().size() > oss.str().size())
              length++;
            for (j += 1; j <= length; j++) {
              iss >> chars[j];
            }
          } else {
            chars[length] += 1;
          }
        } else {
          length++;
          former_char = chars[i];
          chars[length] = former_char;
          count_num = false;
        }
      }
      return length + 1;
    }
  };

  int main(int argc, char *argv[]) {
    // vector<char> n = {'a', 'b', 'b', 'b', 'b', 'b', 'b',
    //                   'b', 'b', 'b', 'b', 'b', 'b'};
    // vector<char> n = {'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h',
    //                   'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h'};
    vector<char> n = {'1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2',
                      '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',
                      '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3',
                      'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'};
    Solution solution = Solution();
    int res = solution.compress(n);
    cout << res << endl;
    ostringstream oss;
    for (int j = 0; j < res; j++) {
      oss << n[j];
    }
    cout << oss.str() << endl;
    for (auto s : n)
      cout << s << endl;
    return 0;
  }
#+END_SRC

#+RESULTS:
|         9 |
| 1622136c8 |
|         1 |
|         6 |
|         2 |
|         2 |
|         1 |
|         3 |
|         6 |
|         c |
|         8 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         2 |
|         3 |
|         3 |
|         3 |
|         3 |
|         3 |
|         3 |
|         c |
|         c |
|         c |
|         c |
|         c |
|         c |
|         c |
|         c |
