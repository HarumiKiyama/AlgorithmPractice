* Description
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

* Solution
#+begin_src rust
  use std::collections::HashSet;
  impl Solution {
      pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {
          if nums.len() < 3 {
              return vec![];
          }
          let mut new_nums = nums;
          new_nums.sort();
          let mut rv: Vec<Vec<i32>> = Vec::new();
          for i in 0..new_nums.len() - 2 {
              let mut start = i + 1;
              let mut end = new_nums.len() - 1;
              while start < end {
                  let res = new_nums[i] + new_nums[start] + new_nums[end];
                  if res == 0 {
                      rv.push(vec![new_nums[i], new_nums[start], new_nums[end]]);
                      start += 1;
                      end -= 1;
                  } else if res > 0 {
                      end -= 1;
                  } else {
                      start += 1;
                  }
              }
          }
          let set : HashSet<_> = rv.drain(..).collect();
          rv.extend(set.into_iter());
          return rv;
      }
  }
#+end_src
