* Description
Given an array A of integers, for each integer A[i] we may choose any x with -K <= x <= K, and add x to A[i].

After this process, we have some array B.

Return the smallest possible difference between the maximum value of B and the minimum value of B.



Example 1:

Input: A = [1], K = 0
Output: 0
Explanation: B = [1]

Example 2:

Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]

Example 3:

Input: A = [1,3,6], K = 3
Output: 0
Explanation: B = [3,3,3] or B = [4,4,4]

Note:

    1 <= A.length <= 10000
    0 <= A[i] <= 10000
    0 <= K <= 10000
* Solution
#+begin_src python
class Solution:
    def smallestRangeI(self, A: List[int], K: int) -> int:
        max_v = max(A)
        min_v = min(A)
        return max(max_v - min_v - 2 * K, 0)
#+end_src

#+begin_src rust
impl Solution {
    pub fn smallest_range_i(a: Vec<i32>, k: i32) -> i32 {
        let mut max_v = a[0];
        let mut min_v = a[0];
        for i in a {
            if max_v < i {
                max_v = i ;
            }
            if min_v > i {
                min_v = i;
            }
        }
        std::cmp::max(max_v - min_v - 2 * k, 0)
    }
}
#+end_src
