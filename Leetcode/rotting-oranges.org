* Description
In a given grid, each cell can have one of three values:

    the value 0 representing an empty cell;
    the value 1 representing a fresh orange;
    the value 2 representing a rotten orange.

Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.



Example 1:

Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.



Note:

    1 <= grid.length <= 10
    1 <= grid[0].length <= 10
    grid[i][j] is only 0, 1, or 2.
* Solution
#+begin_src python :session solution :results output
from copy import deepcopy

class Solution:
    def orangesRotting(self, grid) -> int:
        rv = 0
        row = len(grid)
        col = len(grid[0])

        def check(matrix):
            for i in matrix:
                for j in i:
                    if j == 1:
                        return False
            return True

        for _ in range(100):
            if check(grid):
                return rv
            rv += 1
            t = deepcopy(grid)
            for i in range(row):
                for j in range(col):
                    if grid[i][j] == 2:
                        if i > 0 and t[i-1][j] == 1:
                            t[i-1][j] = 2
                        if i < row - 1 and t[i+1][j] == 1:
                            t[i+1][j] = 2
                        if j > 0 and t[i][j-1] == 1:
                            t[i][j-1] = 2
                        if j < col - 1 and t[i][j+1] == 1:
                            t[i][j+1] = 2
            grid = t
        return -1
#+end_src

#+RESULTS:

#+begin_src python :session solution :results output
grid = [[2,1,1],[0,1,1],[1,0,1]]
solution = Solution()
assert solution.orangesRotting(grid) == -1
grid = [[2,1,1],[1,1,0],[0,1,1]]
assert solution.orangesRotting(grid) == 4
#+end_src

#+RESULTS:
