* Description
本题要求编写程序，计算2个有理数的和、差、积、商。

输入描述:

输入在一行中按照“a1/b1 a2/b2”的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分

母不为0。

输出描述:

分别在4行中按照“有理数1 运算符 有理数2 = 结果”的格式顺序输出2个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的

最简形式“k a/b”，其中k是整数部分，a/b是最简分数部分；若为负数，则须加括号；若除法分母为0，则输出“Inf”。题目保证正确的输出中

没有超过整型范围的整数。


输入例子:

5/3 0/6


输出例子:

1 2/3 + 0 = 1 2/3

1 2/3 - 0 = 1 2/3

1 2/3 * 0 = 0

1 2/3 / 0 = Inf
* Solution
#+BEGIN_SRC cpp :cmdline < input.txt
  #include <algorithm>
  #include <iostream>
  #include <sstream>
  using namespace std;

  void split_string(string s, int &n, int &d) {
    ostringstream oss;
    for (char i : s) {

      if (i == '/') {
        n = stoi(oss.str());
        oss.str("");
      } else if (i == '-')
        continue;
      else
        oss << i;
    }
    d = stoi(oss.str());
    if (s[0] == '-')
      n = -n;
  }
  string to_string(int numerator, int denominator) {
    bool minus = false;
    if ((numerator < 0 && denominator > 0) || (numerator > 0 && denominator < 0))
      minus = true;
    numerator = abs(numerator);
    denominator = abs(denominator);

    int gcd = __gcd(numerator, denominator);
    ostringstream oss;
    numerator = numerator / gcd;
    denominator = denominator / gcd;
    int num = numerator / denominator;
    int reminder = numerator % denominator;
    if (num > 0) {
      if (reminder != 0)
        oss << num << " " << reminder << "/" << denominator;
      else
        oss << num;
    } else if (reminder != 0)
      oss << reminder << "/" << denominator;
    else
      oss << 0;
    if (!minus)
      return oss.str();
    else
      return "(-" + oss.str() + ")";
  }

  string calculate(int first_numerator, int first_denominator,
                   int second_numerator, int second_denominator, char op) {
    switch (op) {
    case '+':
      return to_string(first_numerator * second_denominator +
                           second_numerator * first_denominator,
                       first_denominator * second_denominator);
    case '-':
      return to_string(first_numerator * second_denominator -
                           second_numerator * first_denominator,
                       first_denominator * second_denominator);
    case '*':
      return to_string(first_numerator * second_numerator,
                       first_denominator * second_denominator);
    default:
      if (second_numerator == 0)
        return "Inf";
      return to_string(first_numerator * second_denominator,
                       second_numerator * first_denominator);
    }
  }

  int main(int argc, char *argv[]) {
    string first, second;
    const char symbols[] = {'+', '-', '*', '/'};
    cin >> first >> second;
    int first_numerator, first_denominator, second_numerator, second_denominator;
    split_string(first, first_numerator, first_denominator);
    split_string(second, second_numerator, second_denominator);

    first = to_string(first_numerator, first_denominator);
    second = to_string(second_numerator, second_denominator);

    for (char op : symbols) {
      cout << first << " " << op << " " << second << " " << '=' << " "
           << calculate(first_numerator, first_denominator, second_numerator,
                        second_denominator, op)
           << endl;
    }
    return 0;
  }
#+END_SRC

#+RESULTS:
| 2/3 | + | (-2) | = | (-1    | 1/3) |
| 2/3 | 0 | (-2) | = | 2      | 2/3  |
| 2/3 | * | (-2) | = | (-1    | 1/3) |
| 2/3 | / | (-2) | = | (-1/3) |      |
