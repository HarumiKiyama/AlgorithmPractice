* Description
给定任一个各位数字不完全相同的4位正整数，如果我们先把4个数字按非递增排序，再按非递减排序，然后用第1个数字减第2个数字，将得到
 一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的6174，这个神奇的数字也叫Kaprekar常数。

 例如，我们从6767开始，将得到

 7766 - 6677 = 1089
 9810 - 0189 = 9621
 9621 - 1269 = 8352
 8532 - 2358 = 6174
 7641 - 1467 = 6174
 ... ...

 现给定任意4位正整数，请编写程序演示到达黑洞的过程。


输入描述:

输入给出一个(0, 10000)区间内的正整数N。



输出描述:

如果N的4位数字全相等，则在一行内输出“N - N = 0000”；否则将计算的每一步在一行内输出，直到6174作为差出现，输出格式见样例,每行中间没有空行。注意每个数字按4位数格
 式输出。


输入例子:

6767


输出例子:

7766 - 6677 = 1089
 9810 - 0189 = 9621
 9621 - 1269 = 8352
 8532 - 2358 = 6174
* Solution
#+BEGIN_SRC cpp :results output
  #include <algorithm>
  #include <iostream>
  using namespace std;

  int main(int argc, char *argv[]) {
    int temp_num = 1111;
    // cin >> temp_num;
    if (temp_num == 6174) {
      printf("%04d - %04d = %04d\n", 7641, 1467, 6174);
      return 0;
    }
    const int length = 4;
    char num[length];
    sprintf(num, "%04d", temp_num);
    int res, large, small;
    while (atoi(num) != 6174) {
      if (num[0] == num[1] && num[1] == num[2] && num[2] == num[3]) {
        printf("%04d - %04d = %04d\n", atoi(num), atoi(num), 0);
        break;
      }
      sort(num, num + length);
      small = atoi(num);
      reverse(num, num + length);
      large = atoi(num);
      res = large - small;
      printf("%04d - %04d = %04d\n", large, small, res);
      sprintf(num, "%04d", res);
    }
    return 0;
  }
#+END_SRC

#+RESULTS:
: 1111 - 1111 = 0000
