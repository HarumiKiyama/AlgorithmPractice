* Description
科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式[+-][1-9]"."[0-9]+E[+-][0-9]+，即数字的整数部分

只有1位，小数部分至少有1位，该数字及其指数部分的正负号即使对正数也必定明确给出。



现以科学计数法的格式给出实数A，请编写程序按普通数字表示法输出A，并保证所有有效位都被保留。


输入描述:

每个输入包含1个测试用例，即一个以科学计数法表示的实数A。该数字的存储长度不超过9999字节，且其指数的绝对值不超过9999。



输出描述:

对每个测试用例，在一行中按普通数字表示法输出A，并保证所有有效位都被保留，包括末尾的0。


输入例子:

+1.23400E-03


输出例子:

0.00123400
* Solution
#+BEGIN_SRC cpp :cmdline < input.txt
  #include <iostream>
  #include <sstream>
  using namespace std;

  int main(int argc, char *argv[]) {
    string temp;
    cin >> temp;
    char exponent_symbol = '+';
    ostringstream res;
    if (temp[0] == '-')
      res << '-';
    ostringstream num;
    ostringstream exponent_num;
    bool is_exponent = false;
    for (size_t i = 1; i < temp.size(); i++) {
      if (temp[i] == '.') {
        continue;
      }
      if (temp[i] == '-') {
        exponent_symbol = '-';
        continue;
      }
      if (temp[i] == 'E') {
        is_exponent = true;
        continue;
      }
      if (is_exponent) {
        exponent_num << temp[i];
      } else {
        num << temp[i];
      }
    }
    int exponent = stoi(exponent_num.str());
    string s_num = num.str();
    if (exponent_symbol == '-') {
      res << "0.";
      for (int i = 1; i < exponent; i++) {
        res << 0;
      }
      res << s_num;
    } else {
      if (exponent >= s_num.size() - 1) {
        res << s_num;
        for (int i = 0; i < exponent - s_num.size() + 1; i++) {
          res << 0;
        }
      } else {
        res << s_num[0];
        for (int i = 0; i < exponent; i++) {
          res << s_num[i + 1];
        }
        if (exponent < s_num.size() - 1)
          res << '.';
        for (int i = exponent + 1; i < s_num.size(); i++) {
          res << temp[i + 1];
        }
      }
    }
    for (char i : res.str())
      cout << i<<endl;
    return 0;
  }
#+END_SRC

#+RESULTS:
| 0 |
| 0 |
| 0 |
| 0 |
| 1 |
| 2 |
| 3 |
| 4 |
| 0 |
| 0 |
#+TBLFM:
