* Description
给定一个常数K以及一个单链表L，请编写程序将L中每K个结点反转。例如：给定L为1→2→3→4→5→6，K为3，则输出应该为

3→2→1→6→5→4；如果K为4，则输出应该为4→3→2→1→5→6，即最后不到K个元素不反转。


输入描述:

每个输入包含1个测试用例。每个测试用例第1行给出第1个结点的地址、结点总个数正整数N(<= 105)、以及正整数K(<=N)，即要求反转的

子链结点的个数。结点的地址是5位非负整数，NULL地址用-1表示。



接下来有N行，每行格式为：



Address Data Next



其中Address是结点地址，Data是该结点保存的整数数据，Next是下一结点的地址。



输出描述:

对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。


输入例子:

00100 6 4

00000 4 99999

00100 1 12309

68237 6 -1

33218 3 00000

99999 5 68237

12309 2 33218


输出例子:

00000 4 33218

33218 3 12309

12309 2 00100

00100 1 99999

99999 5 68237

68237 6 -1
* Solution
#+BEGIN_SRC cpp
  #include <iostream>
  #include <vector>
  #include <algorithm>

  using namespace std;

  int main(int argc, char *argv[]) {
    struct Node {
      string root;
      string data;
      string next;
      Node *real_next = nullptr;
    };

    string first;
    int total_num, reverse_num;
    cin >> first >> total_num >> reverse_num;
    vector<Node> nodes(total_num);
    for (int i = 0; i < total_num; i++) {
      Node temp;
      cin >> temp.root >> temp.data >> temp.next;
      nodes.push_back(temp);
    }
    find(nodes.begin(), nodes.end(), []())
    return 0;
  }
#+END_SRC
