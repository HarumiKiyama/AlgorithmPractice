* Description
如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二

十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱P和他实付的钱A，你的任务是写一个程序来计算他应该被找的零钱。


输入描述:

输入在1行中分别给出P和A，格式为“Galleon.Sickle.Knut”，其间用1个空格分隔。这里Galleon是[0, 107]]区间内的整数，Sickle是[0,

17)区间内的整数，Knut是[0, 29)区间内的整数。



输出描述:

在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。


输入例子:

10.16.27 14.1.28


输出例子:

3.2.1
* Solution
#+BEGIN_SRC cpp  :cmdline < input.txt
  #include <iostream>
  #include <sstream>
  #include <string>
  #include <vector>
  using namespace std;

  void split_money(string money, int &G, int &S, int &K) {
    ostringstream oss;
    vector<string> temp;
    for (char i : money) {
      if (i == '.') {
        temp.push_back(oss.str());
        oss.str("");
        continue;
      }
      oss << i;
    }
    temp.push_back(oss.str());
    G = stoi(temp[0]);
    S = stoi(temp[1]);
    K = stoi(temp[2]);
  }

  int main(int argc, char *argv[]) {
    int GalleonP, SickleP, KnutP, GalleonA, SickleA, KnutA, total_knuts;
    string money;
    cin >> money;
    split_money(money, GalleonP, SickleP, KnutP);
    cin >> money;
    split_money(money, GalleonA, SickleA, KnutA);
    total_knuts = 29 * 17 * GalleonA + 29 * SickleA + KnutA - 29 * 17 * GalleonP -
                  29 * SickleP - KnutP;
    if (total_knuts < 0){
      cout << '-';
    }
    total_knuts = abs(total_knuts);
    GalleonA = total_knuts/(29*17);
    SickleA = total_knuts%(29*17)/29;
    KnutA = total_knuts % 29;
    cout << GalleonA << '.' << SickleA <<"."<< KnutA << endl;
    return 0;
  }
#+END_SRC

#+RESULTS:
: -3.2.1
