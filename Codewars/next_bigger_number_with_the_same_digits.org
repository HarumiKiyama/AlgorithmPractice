You have to create a function that takes a positive integer number and returns the next bigger number formed by the same digits:

#+BEGIN_SRC python
  next_bigger(12) == 21
  next_bigger(513) == 531
  next_bigger(2017) == 2071
#+END_SRC

If no bigger number can be composed using those digits, return -1:

#+BEGIN_SRC python
  next_bigger(9) == -1
  next_bigger(111) == -1
  next_bigger(531) == -1
#+END_SRC

#+RESULTS:


#+BEGIN_SRC python  :results output
  import unittest


  def next_bigger(n):
      if n <= 11:
          return -1
      num_list = list(str(n))
      maxed = True
      for i in reversed(range(len(num_list))):
          if max(num_list[i:]) != num_list[i]:
              maxed = False
              break
      if maxed:
          return -1
      sorted_list = sorted(num_list[i:])
      set_sorted_list = sorted(set(sorted_list))
      index = set_sorted_list.index(num_list[i])
      new_max = set_sorted_list[index + 1]
      sorted_list.remove(new_max)
      return int(''.join(num_list[:i] + [new_max] + sorted_list))


  class TestCase(unittest.TestCase):
      def test_suits(self):
          self.assertEqual(next_bigger(12), 21)
          self.assertEqual(next_bigger(513), 531)
          self.assertEqual(next_bigger(2017), 2071)
          self.assertEqual(next_bigger(414), 441)
          self.assertEqual(next_bigger(144), 414)
          self.assertEqual(next_bigger(890), 908)


  unittest.main()
#+END_SRC

#+RESULTS:

