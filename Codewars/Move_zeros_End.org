Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.

#+BEGIN_SRC python :results output
  import unittest


  def move_zeros(array):
      zeros = []
      no_zeros = []
      for i in array:
          if (isinstance(i,int) or isinstance(i,float)) and not isinstance(i, bool) and int(i) == 0:
              zeros.append(i)
          else:
              no_zeros.append(i)
      no_zeros.extend(zeros)
      return no_zeros


  class TestMoveZeros(unittest.TestCase):
      def test_func(self):
          self.assertEqual(
              move_zeros([1, 2, 0, 1, 0, 1, 0, 3, 0, 1]),
              [1, 2, 1, 1, 3, 1, 0, 0, 0, 0])
          self.assertEqual(
              move_zeros([
                  9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9
              ]), [9, 9, 1, 2, 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

          self.assertEqual(
              move_zeros([
                  "a", 0, 0, "b", "c", "d", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0,
                  0, 9
              ]), [
                  "a", "b", "c", "d", 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0
              ])
          self.assertEqual(
              move_zeros([
                  "a", 0, 0, "b", None, "c", "d", 0, 1, False, 0, 1, 0, 3, [], 0,
                  1, 9, 0, 0, {}, 0, 0, 9
              ]), [
                  "a", "b", None, "c", "d", 1, False, 1, 3, [], 1, 9, {}, 9, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0
              ])
          self.assertEqual(
              move_zeros([0, 1, None, 2, False, 1, 0]),
              [1, None, 2, False, 1, 0, 0])
          self.assertEqual(move_zeros(["a", "b"]), ["a", "b"])
          self.assertEqual(move_zeros(["a"]), ["a"])


  unittest.main()
#+END_SRC

#+RESULTS:
