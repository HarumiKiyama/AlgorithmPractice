JSON is a simple data-interchange format that is based on a simplified version of JavaScript's object notation. The official website has a great description of the language.

For the purposes of this kata we will use a simplified version of JSON. Specifically, you may ignore numbers with exponents and strings with Unicode and escape sequences. The updated parts of the specification are as follows

#+BEGIN_SRC haskell
  module Main where
  import Test.Hspec

  data Value
    = String String
    | Number Double
    | Object [(Value, Value)] -- an association list -- only a `String` is valid as the index `Value`
    | Array [Value] -- not limited to identical primitive datatypes
    | Boolean Bool -- either `True` or `False`
    | Null
    deriving (Show, Eq)

  tokenize :: String -> [String]
  tokenize = foldr tokenize' []
    where
      specialToken = "{[:,]}\""
      tokenize' :: Char -> [String] -> [String]
      tokenize' x res =
        if x `elem` specialToken || head (head res) `elem` specialToken
          then [x] : res
          else (x : head res) : tail res

  -- parse :: String -> Maybe Value
  -- parse  =  undefined

  -- valueParse :: String -> Value
  -- valueParse x =
  --   case x of
  --     "null" -> Null
  --     "false" -> Boolean False
  --     "true" -> Boolean True
  --     _ -> Number (read x :: Double)

  -- listParse :: String -> [Value]
  -- listParse = undefined

  -- objectParse :: String -> [(Value, Value)]
  -- objectParse = undefined

  main :: IO ()
  main = do
    hspec $ do
      describe "JSON.Parser" $ do
        it "basic fixed tests" $
          -- parse "123" `shouldBe` Just (Number 123)
          -- parse "{\"a\":[1,2]}" `shouldBe` Just (Object [ (String "a", Array [ Number 1, Number 2 ] ) ])
         do
          tokenize "123" `shouldBe` ["123"]
          tokenize "{\"a\":[1,2]}" `shouldBe`
            ["{", "\"", "a", "\"", ":", "[", "1", ",", "2", "]", "}"]
#+END_SRC
